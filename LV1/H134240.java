package LV1;
/*
수웅이는 매달 주어진 음식을 빨리 먹는 푸드 파이트 대회를 개최합니다.
이 대회에서 선수들은 1대 1로 대결하며, 매 대결마다 음식의 종류와 양이 바뀝니다.
대결은 준비된 음식들을 일렬로 배치한 뒤, 한 선수는 제일 왼쪽에 있는 음식부터 오른쪽으로,
다른 선수는 제일 오른쪽에 있는 음식부터 왼쪽으로 순서대로 먹는 방식으로 진행됩니다.
중앙에는 물을 배치하고, 물을 먼저 먹는 선수가 승리하게 됩니다.

이때, 대회의 공정성을 위해 두 선수가 먹는 음식의 종류와 양이 같아야 하며, 음식을 먹는 순서도 같아야 합니다.
또한, 이번 대회부터는 칼로리가 낮은 음식을 먼저 먹을 수 있게 배치하여 선수들이 음식을 더 잘 먹을 수 있게 하려고 합니다.
이번 대회를 위해 수웅이는 음식을 주문했는데, 대회의 조건을 고려하지 않고 음식을 주문하여 몇 개의 음식은 대회에 사용하지 못하게 되었습니다.

예를 들어, 3가지의 음식이 준비되어 있으며, 칼로리가 적은 순서대로 1번 음식을 3개, 2번 음식을 4개, 3번 음식을 6개 준비했으며,
물을 편의상 0번 음식이라고 칭한다면,
두 선수는 1번 음식 1개, 2번 음식 2개, 3번 음식 3개씩을 먹게 되므로 음식의 배치는 "1223330333221"이 됩니다.
따라서 1번 음식 1개는 대회에 사용하지 못합니다.

수웅이가 준비한 음식의 양을 칼로리가 적은 순서대로 나타내는 정수 배열 food가 주어졌을 때,
대회를 위한 음식의 배치를 나타내는 문자열을 return 하는 solution 함수를 완성해주세요.
 */
public class H134240 {
	public String solution(int[] food) {
		// 음식을 배치한 문자열을 만들기 위해 StringBuilder를 사용합니다.
		StringBuilder sb =new StringBuilder();

		// 1번 음식부터 마지막 음식까지 순회합니다.
		for (int i = 1; i < food.length; i++) {
			// 각 음식을 반으로 나누어 두 선수가 먹을 수 있는 음식의 양을 구합니다.
			int half = food[i] / 2;

			// 두 선수가 먹을 수 있는 음식의 양만큼 해당 음식 번호를 문자열에 추가합니다.
			for (int j = 0; j < half; j++) {
				sb.append(i);
			}
		}
		// 현재까지 만들어진 문자열을 temp에 저장합니다.
		String temp = sb.toString();
		// 두 선수가 만나는 지점인 물을 추가합니다. 물은 0번 음식입니다.
		sb.append(0);

		// 앞서 만든 temp 문자열을 뒤집어서 추가합니다.
		// 이렇게 하면 두 선수가 같은 양과 종류의 음식을 순서대로 먹게 됩니다.
		sb.append(new StringBuilder(temp).reverse());

		// 최종적으로 만들어진 문자열을 반환합니다.
		return sb.toString();
	}
}