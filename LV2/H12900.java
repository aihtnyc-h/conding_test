package LV2;

public class H12900 {
    public int solution(int n) {
        int mod = 1_000_000_007;  // 결과값이 매우 커질 수 있으므로, 이를 방지하기 위해 모듈러 연산을 적용할 값이다.

        // n이 1이나 2일 때의 초기값을 위한 동적 계획법 테이블을 설정
        int[] dp = new int[n+1];
        dp[1] = 1;  // 가로 길이가 2, 세로 길이가 1인 타일로 가로 길이가 2, 세로 길이가 1인 바닥을 채우는 방법은 1가지이다.
        dp[2] = 2;  // 가로 길이가 2, 세로 길이가 1인 타일로 가로 길이가 2, 세로 길이가 2인 바닥을 채우는 방법은 2가지이다.

        // 3부터 n까지의 값을 계산한다.
        for (int i = 3; i <= n; i++) {
            // 현재 i 길이의 바닥을 채우는 방법은
            // i-1 길이의 바닥을 채운 후 세로로 타일을 하나 놓는 방법과
            // i-2 길이의 바닥을 채운 후 가로로 타일을 두 개 놓는 방법이 있으므로
            // dp[i]는 dp[i-1]과 dp[i-2]의 합이 된다.
            // 그리고 결과값이 너무 커지는 것을 방지하기 위해 모듈러 연산을 적용한다.
            dp[i] = (dp[i-1] + dp[i-2]) % mod;
        }

        return dp[n];  // 최종적으로 계산된 가로 길이가 n인 바닥을 채우는 방법의 수를 반환한다.
    }
}